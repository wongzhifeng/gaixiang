// 街巷社区互助平台数据库设计
// 设计原则：简单易用、适合老年用户、支持智能匹配
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/data.db"
}

// 用户表 - 社区居民信息
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?  // 可选手机号
  avatar          String?  // 头像URL

  // 认证信息
  passwordHash    String?  // 密码哈希（可选，支持第三方登录）
  emailVerified   Boolean  @default(false) // 邮箱验证状态

  // 位置信息（模糊位置，保护隐私）
  locationLat     Float?   // 纬度
  locationLng     Float?   // 经度
  locationText    String?  // 位置描述（如：XX小区XX栋）

  // 用户状态
  onlineStatus    Boolean  @default(false)  // 在线状态
  isVerified      Boolean  @default(false)  // 是否验证
  trustLevel      Int      @default(0)      // 信任等级

  // 技能标签
  skills          String?  // JSON格式：'["技能1", "技能2"]'
  interests       String?  // JSON格式：'["兴趣1", "兴趣2"]'

  // 统计信息
  helpCount       Int      @default(0)      // 帮助次数
  receiveCount    Int      @default(0)      // 接受帮助次数

  // 时间戳
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 纳瓦尔升级：新增字段
  voiceProfile   String?  // 语音特征（用于语音交互）
  specializationStyle String? // 专长风格描述

  // 关系
  demands         Demand[]  // 发布的需求
  services        Service[] // 提供的服务
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  conversations   ConversationParticipant[]
  responses       Response[] // 对需求/服务的响应
  userAMatches    Match[] @relation("UserAMatches") // 作为用户A的匹配
  userBMatches    Match[] @relation("UserBMatches") // 作为用户B的匹配

  // 纳瓦尔升级：新增关系
  userSpecializations UserSpecialization[]
  trustScore          TrustScore?
  reputationCard      ReputationCard?
  caseStudies         CaseStudy[]

  @@map("users")
}

// 需求表 - 用户发布的求助需求
model Demand {
  id          String   @id @default(cuid())
  title       String   // 需求标题
  description String   // 详细描述

  // 需求类型和状态
  type        String @default("GENERAL")  // 需求类型：GENERAL, EMERGENCY, REPAIR, CARE, SHOPPING, MOVING, LEARNING
  status      String @default("ACTIVE")    // 需求状态：ACTIVE, PENDING, COMPLETED, CANCELLED
  urgency     Int        @default(3)        // 紧急程度 1-5

  // 位置信息
  locationLat Float?    // 需求发生地纬度
  locationLng Float?    // 需求发生地经度
  locationText String?  // 需求发生地描述

  // 标签分类
  tags        String?   // JSON格式：'["标签1", "标签2"]'
  category    String    // 需求分类

  // 时间信息
  deadline    DateTime? // 截止时间
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 纳瓦尔升级：新增专长关联和价值量化
  requiredSpecializationId String?
  requiredSpecialization   Specialization? @relation(fields: [requiredSpecializationId], references: [id])
  budget          Float?   // 预算
  valueType       String?  // 价值类型：TIME, PRODUCT, SERVICE

  // 关系
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Response[] // 对该需求的响应
  matches     Match[]    // 匹配记录

  @@map("demands")
}

// 服务表 - 用户提供的服务
model Service {
  id          String   @id @default(cuid())
  title       String   // 服务标题
  description String   // 服务描述

  // 服务类型和状态
  type        String @default("GENERAL")   // 服务类型：GENERAL, REPAIR, CARE, SHOPPING, MOVING, TEACHING
  status      String @default("ACTIVE")    // 服务状态：ACTIVE, PAUSED, COMPLETED

  // 位置信息
  locationLat Float?    // 服务提供地纬度
  locationLng Float?    // 服务提供地经度
  locationText String?  // 服务提供地描述

  // 标签分类
  tags        String?   // JSON格式：'["标签1", "标签2"]'
  category    String    // 服务分类

  // 时间信息
  availableFrom DateTime? // 可提供服务开始时间
  availableTo   DateTime? // 可提供服务结束时间
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 纳瓦尔升级：新增专长关联和价值量化
  specializationId String?
  specialization   Specialization? @relation(fields: [specializationId], references: [id])
  pricingModel     String @default("TIME_BASED") // TIME_BASED, PACKAGE, PRODUCT
  basePrice        Float?  // 基础价格
  packageDetails   String? // JSON: 套餐详情
  safetyNetPolicy String? // 兜底政策描述
  refundPolicy    String? // 退款政策

  // 关系
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Response[] // 对该服务的响应
  matches     Match[]    // 匹配记录

  @@map("services")
}

// 响应表 - 用户对需求/服务的响应
model Response {
  id          String   @id @default(cuid())

  // 响应类型
  type        String @default("DEMAND_RESPONSE") // 响应类型：DEMAND_RESPONSE, SERVICE_RESPONSE
  status      String @default("PENDING")         // 响应状态：PENDING, ACCEPTED, REJECTED, COMPLETED

  // 响应内容
  message     String?  // 响应消息

  // 时间信息
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关系
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 多态关联 - 可以响应需求或服务
  demandId    String?
  demand      Demand?  @relation(fields: [demandId], references: [id])
  serviceId   String?
  service     Service? @relation(fields: [serviceId], references: [id])

  @@map("responses")
}

// 匹配表 - 智能匹配记录
model Match {
  id          String   @id @default(cuid())

  // 匹配信息
  score       Float    // 匹配分数 0-100
  reason      String?  // 匹配原因

  // 匹配类型
  type        String @default("DEMAND_SERVICE") // 匹配类型：DEMAND_SERVICE, USER_USER

  // 时间信息
  createdAt   DateTime @default(now())

  // 关系
  demandId    String?
  demand      Demand?  @relation(fields: [demandId], references: [id])
  serviceId   String?
  service     Service? @relation(fields: [serviceId], references: [id])

  // 匹配的用户对
  userAId     String
  userA       User     @relation("UserAMatches", fields: [userAId], references: [id])
  userBId     String
  userB       User     @relation("UserBMatches", fields: [userBId], references: [id])

  @@map("matches")
}

// 对话表
model Conversation {
  id          String   @id @default(cuid())

  // 对话信息
  title       String?  // 对话标题
  lastMessage String?  // 最后一条消息

  // 信任机制
  trustProgress Int    @default(0) // 信任进度 0-100
  messageCount  Int    @default(0) // 消息数量

  // 时间信息
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关系
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

// 对话参与者表
model ConversationParticipant {
  id             String       @id @default(cuid())

  // 关系
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // 参与者状态
  isActive       Boolean      @default(true)
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

// 消息表
model Message {
  id          String   @id @default(cuid())

  // 消息内容
  content     String   // 消息内容
  type        String @default("TEXT") // 消息类型：TEXT, QUICK_REPLY, CONTACT

  // 时间信息
  createdAt   DateTime @default(now())

  // 关系
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// 注意：所有枚举类型已改为String类型存储
// 枚举值说明：
// DemandType: GENERAL, EMERGENCY, REPAIR, CARE, SHOPPING, MOVING, LEARNING
// DemandStatus: ACTIVE, PENDING, COMPLETED, CANCELLED
// ServiceType: GENERAL, REPAIR, CARE, SHOPPING, MOVING, TEACHING
// ServiceStatus: ACTIVE, PAUSED, COMPLETED
// ResponseType: DEMAND_RESPONSE, SERVICE_RESPONSE
// ResponseStatus: PENDING, ACCEPTED, REJECTED, COMPLETED
// MatchType: DEMAND_SERVICE, USER_USER
// MessageType: TEXT, QUICK_REPLY, CONTACT

// 纳瓦尔升级：专长基因库和信任复利系统
// 新增枚举类型说明：
// PricingModel: TIME_BASED, PACKAGE, PRODUCT
// VerificationType: CERTIFICATE, CASE, REVIEW, NONE

// ========== 纳瓦尔升级：专长基因库模型 ==========

// 专长定义表 - 定义平台支持的专长类型
model Specialization {
  id          String   @id @default(cuid())
  name        String   // 专长名称，如"老房水电改造"
  description String?  // 专长描述

  // 分类体系
  category    String   // 一级分类：维修、教育、医疗等
  subcategory String?  // 二级分类：水电维修、乐器教学等

  // 稀缺性评估
  scarcity    Int      @default(5)  // 稀缺性评分 1-10
  demandLevel Int      @default(5)  // 需求热度 1-10
  avgPrice    Float?   // 市场均价参考

  // 验证要求
  verificationType String @default("NONE") // 资质类型：CERTIFICATE(证书)、CASE(案例)、REVIEW(评价)、NONE(无需)
  minCaseCount     Int    @default(0) // 最低案例数量要求

  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关系
  userSpecializations UserSpecialization[]
  caseStudies         CaseStudy[]
  demands             Demand[]
  services            Service[]

  @@map("specializations")
}

// 用户专长关联表 - 记录用户与专长的关联关系
model UserSpecialization {
  id                String   @id @default(cuid())

  // 核心关系
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specializationId  String
  specialization    Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  // 专长熟练度
  proficiency       Int      @default(3)  // 熟练度 1-5
  experienceYears   Int?     // 经验年数

  // 差异化优势
  uniqueAdvantage   String?  // 独特优势，如"10年小区改造经验"
  teachingMethod    String?  // 教学方法（针对教学类）
  serviceArea       String?  // 服务范围

  // 案例数据
  caseCount         Int      @default(0)  // 成功案例数量
  avgRating         Float?   // 平均评分
  successRate       Float?   // 成功率

  // 服务形式
  serviceTypes      String?  // JSON: ["一对一", "小班课", "线上指导"]
  pricingModel      String   @default("TIME_BASED") // TIME_BASED, PACKAGE, PRODUCT

  // 时间戳
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, specializationId])
  @@map("user_specializations")
}

// 信任评分表 - 实现纳瓦尔信任公式：责任 × 一致性² × 兜底能力
model TrustScore {
  id          String   @id @default(cuid())

  // 核心关系
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 纳瓦尔信任三要素
  responsibility  Float @default(50.0)  // 责任评分 0-100
  consistency     Float @default(50.0)  // 一致性评分 0-100
  safetyNet       Float @default(50.0)  // 兜底能力评分 0-100

  // 综合评分 = 责任 × 一致性² × 兜底能力
  overallScore    Float @default(12.5)  // 初始值: 50 × 0.5² × 50 = 12.5

  // 统计指标
  transactionCount Int   @default(0)    // 总交易次数
  completedCount   Int   @default(0)    // 完成交易次数
  disputeCount     Int   @default(0)    // 纠纷次数
  disputeRate      Float @default(0.0)  // 纠纷率

  // 响应指标
  avgResponseTime  Float? // 平均响应时间(小时)
  onTimeRate       Float? // 准时率

  // 时间戳
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("trust_scores")
}

// 信誉名片表 - 构建用户的本地品牌资产
model ReputationCard {
  id          String   @id @default(cuid())

  // 核心关系
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 品牌展示
  tagline     String?  // 个人标语
  bio         String?  // 个人简介

  // 复利数据
  repeatRate      Float?   // 复购率
  localInfluence  Float?   // 本地影响力评分
  shareCount      Int      @default(0) // 名片分享次数

  // 杠杆权益
  hasLeverageAccess Boolean @default(false) // 是否解锁杠杆权益
  leverageLevel     Int     @default(0)     // 杠杆等级

  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reputation_cards")
}

// 案例研究表 - 沉淀用户的成功案例
model CaseStudy {
  id          String   @id @default(cuid())

  // 核心关系
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 案例信息
  title       String   // 案例标题
  description String   // 详细描述
  challenge   String?  // 面临的挑战
  solution    String?  // 解决方案
  result      String?  // 最终结果

  // 关联专长
  specializationId String?
  specialization   Specialization? @relation(fields: [specializationId], references: [id])

  // 多媒体
  images      String?  // JSON: ["image1.jpg", "image2.jpg"]

  // 验证数据
  clientFeedback String? // 客户反馈
  metrics        String? // JSON: {"satisfaction": 95, "timeSaved": 10}

  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("case_studies")
}

